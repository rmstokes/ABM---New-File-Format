
/* 

-This is the component which will accept the log information that has been generated by client data capture tool/Recorder
-Right now, the log reader should be able to read a text file but that will later change so that JSON data can be received and read from the client.
-Log reader should store the online id or username into a variable
-Log reader should step through the file parsing the information based on the following format:

<Login Date/Time><newline>
<newline>
<GUID Header>:<Hashed userID><newline>
<PageID Header>:<Hashed pageID><newline>
<DeviceID Header>:<Hashed DeviceID><newline>
<Timestamp Header>:<EventType Header><newline>
<Timestamp>:<UserEvent>:(<Coordinates>)* <Pipe>

<Timestamp> ::= <Integer>
<UserEvent> ::= <MouseMovement> | <MouseClick> | <KeyPress>
<MouseMovement> ::= (M)
<MouseClick> ::= (C)
<KeyPress> ::= (K)
<Coordinates> ::= xCoord, yCoord
<xCoord> ::= <Integer>
<yCoord> ::= <Integer>
<Pipe> ::= "|"
<GUID Header> ::= "GUID"
<PageID Header> ::= "PageID"
<DeviceID Header> ::= "DeviceID"
<Timestamp Header> ::= "Timestamp(ms)"
<EventType Header> ::= "EventType(M:Mouse,C:Click,K:Keyboard):X,Y"


*/





import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author Angelica
 */
public class LogReader {

	//instance variables
    private ArrayList<ArrayList> userInstances; //a list of mouse movement lists
    //userInstances is a user session.
    //this version of log reader reads in one session per file.

  
    private String userID;
    private int subjectNumber;

    //constructor
    LogReader(String partialPath, int numInstances) {
    	//file is currently of the type: path\User+<subjectNumber>
    	//after the <subjectNumber> the file naming scheme is _FirstLogin.txt; _SecondLogin.txt; etc.
		
    	//fullPath will contain the partialPath along with the loginSession.
    	String fullPath = "";
    	
    	//find subjectNumber to set instance variable
    	int userIndex = partialPath.lastIndexOf("User");
    	int numIndex = userIndex+4;
    	String num = partialPath.substring(numIndex);
    	Integer userNumber = new Integer(num);
    	subjectNumber = userNumber-1;
    	//System.out.println(num);
    	//System.exit(0);
    	//loop will determine which session we are saving and based on that the proper extension
    	//will be concatenated to the file name.
    	
    	/* locate and open all files for a given user (one by one)
    	 * scan file contents and store subject number and userID
    	 * store mouse movements into userInstances arraylist
    	 * 
    	 */
        userInstances = new ArrayList();   
        Scanner scanner;
        try {
        	String loginSession = "";
        	//loop will go through each instance/session for a single user.
        	for (int i = 0; i < numInstances; i++){
        		//System.out.println("i: "+i);
        		switch(i){
        		case 0:
        			loginSession = "_FirstLogin.txt";
        			break;
        		case 1:
        			loginSession = "_SecondLogin.txt";
        			break;
        		case 2:
        			loginSession = "_ThirdLogin.txt";
        			break;
        		case 3:
        			loginSession = "_FourthLogin.txt";
        			break;
        		case 4:
        			loginSession = "_FifthLogin.txt";
        			break;
        		default:
        			System.out.println("**number of instances per user unsupported**");
        			System.exit(4);
        		}//end switch
        		fullPath = partialPath + loginSession;
        		
        		//System.out.println("fullPath: "+fullPath);
        		//scan the file located at the fullPath
        		scanner = new Scanner(new File(fullPath));
        		
        		
        		//the files that we are receiving all have different formattting
        		//so we are going to have to take a different approach to extracting the data
        		//keep looping through file until we see the '0:' which designates the start
        		//of the user events.
        		String entireFile = "";
        		while (scanner.hasNextLine()){
        			entireFile += scanner.nextLine();
        		}
        		int guidIndex = entireFile.indexOf("GUID:");
        		int pageIndex = entireFile.indexOf("PageID");
        		userID = entireFile.substring(guidIndex+5, pageIndex);
        		//System.out.println("userID: "+userID);
        		//System.exit(0);
        		//System.out.println("entire file: "+entireFile);
        		int lastHeadingIndex = entireFile.lastIndexOf("Y");
        		int start = lastHeadingIndex+3;

        		//System.out.println(entireFile.substring(start));
        		//System.exit(0);
        		
        		//String allEvents = scanner.next(); 
        		//System.out.println("All events: "+allEvents);
        		//break the allEvents string down so that it only extends to the first click or keystroke
        		String firstMovements = ""; //all the moves up to first click or keypress
        		firstMovements = entireFile.substring(start); //start with MouseMove
        		
        		int keyPressIndex = firstMovements.indexOf("K");
        		int clickIndex = firstMovements.indexOf("C");
        		int moveIndex = firstMovements.indexOf("M");
        		
        		//if statement will remove trailing clicks or keypresses from firstMouseMovements
        		if (clickIndex <= keyPressIndex && clickIndex > 0){
        			firstMovements = firstMovements.substring(0, clickIndex);
        		} else if (keyPressIndex < clickIndex && keyPressIndex > 0){
        			firstMovements = firstMovements.substring(0, keyPressIndex);
        		}
        		int lastPipe = firstMovements.lastIndexOf("|");
    			firstMovements = firstMovements.substring(0, lastPipe+1);
        		//System.out.println("firstMovements: "+firstMovements);
        		
        		
        		//so at this line we know that everything we have is a mouse movement and no other 
        		//type of event.
        		//pull off all the mouse move coordinates and use them to create MouseMove objects
        		//put the objects into a list structure
        		
        		ArrayList<MouseMovement> userBehavior = new ArrayList<MouseMovement>();
    
        		
        		do {
        			
        			//skip to M if this returns -1 break;
        			//skip ':'
        			//grab x
        			//skip ','
        			//grab y
        			int index = firstMovements.indexOf("M");
        			if (index == -1) break;        	
        			index+=2;
        			firstMovements = firstMovements.substring(index);
        			//System.out.println("start at x: "+firstMovements);
        			index = firstMovements.indexOf(",");
        			
        			Double x = new Double(firstMovements.substring(0, index));
        			//System.out.println("Integer x: "+x);
        			int pipe = firstMovements.indexOf("|");
        			Double y = new Double(firstMovements.substring(index+1, pipe));
        			//System.out.println("Integer y: "+y);
        			MouseMovement move = new MouseMovement(x, y);
        			userBehavior.add(move);
        			
        			//System.exit(0);
        			
        		} while (true);
  
        		
        		userInstances.add(userBehavior);
        		
        		try {
    				System.out.println("num Mouse Moves before 1st click or keystroke==> "+userBehavior.size());
    				Thread.sleep(5000);
    			} catch (InterruptedException e) {
    				// TODO Auto-generated catch block
    				e.printStackTrace();
    			}
        		
        		//System.out.println("exited loop");
        		//System.exit(0);
        	}//end loop
			
			
			
			
			//System.exit(0);
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
    }//end constructor
    
    public ArrayList <ArrayList> getUserInstances(){
    	return userInstances;
    }
    
    public String getUserID(){
    	//System.out.println("inside getUserID: "+userID);
    	//System.exit(0);
    	return userID;
    }
    
    public int getSubjectNumber(){
    	return subjectNumber;
    }

    public String toString() {
        String s = "UserEvent Data for UserID: " + userID + "\n";
        for (int i = 0; i < userInstances.size(); i++) {
            for (int j = 0; j < userInstances.get(i).size(); j++) {
                s += userInstances.get(i).get(j).toString() + "\n";
            }
        }
        return s;
    }

   /* public static void main(String[] args) {
        // TODO code application logic here

        //we probaby need something more dynamic to read the file in with
        String[] path = {"C:\\Users\\Angelica\\Desktop\\A&T\\Research\\UserOutput (1)CASIS.txt"};
        LogReader lr = new LogReader(path);
        System.out.println(lr.toString());
    }*/

}
